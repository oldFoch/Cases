const fetch = require('node-fetch');
const assert = require('assert');
const { HttpsProxyAgent } = require('https-proxy-agent');

/**
 * Sleep function for delays between retries
 * @param {number} ms - Milliseconds to sleep
 * @returns {Promise<void>}
 */
const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

// Simple proxy rotation counter
let proxyIndex = 0;

/**
 * Makes a fetch request with retry logic and proxy support
 * @param {string} url - The URL to fetch
 * @param {object} options - Fetch options
 * @param {object} requestOptions - Custom request options
 * @param {string[]} requestOptions.proxies - Array of proxy URLs
 * @param {number} requestOptions.maxRetries - Maximum number of retries
 * @param {number} requestOptions.retryDelay - Base delay between retries
 * @returns {Promise<Response>} The fetch response
 */
const fetchWithRetry = async (url, options = {}, requestOptions = {}) => {
	const { proxies = [], maxRetries = 3, retryDelay = 1000 } = requestOptions;
	let lastError;

	for(let attempt = 0; attempt <= maxRetries; attempt++) {
		try{
			const fetchOptions = { ...options };

			// Add proxy agent if proxies are available
			if(proxies.length > 0) {
				const proxyUrl = proxies[proxyIndex % proxies.length];
				proxyIndex = (proxyIndex + 1) % proxies.length;
				fetchOptions.agent = new HttpsProxyAgent(proxyUrl);
			}

			const response = await fetch(url, fetchOptions);

			// If we get a 429, throw an error to trigger retry
			if(response.status === 429) {
				throw new Error(`Rate limited (429) - attempt ${attempt + 1}/${maxRetries + 1}`);
			}

			// If response is ok, return it
			if(response.ok) {
				return response;
			}

			// For other HTTP errors, throw immediately (don't retry)
			if(response.status >= 400 && response.status !== 429) {
				throw new Error(`HTTP ${response.status}: ${response.statusText}`);
			}

			return response;
		} catch(error) {
			lastError = error;

			// Don't retry on the last attempt
			if(attempt === maxRetries) {
				break;
			}

			// Calculate delay with exponential backoff and jitter
			const delay = retryDelay * Math.pow(2, attempt) + Math.random() * 1000;
			console.warn(`Steam API request failed (attempt ${attempt + 1}/${maxRetries + 1}): ${error.message}. Retrying in ${Math.round(delay)}ms...`);

			await sleep(delay);
		}
	}

	throw new Error(`Steam API request failed after ${maxRetries + 1} attempts. Last error: ${lastError.message}`);
};

/**
 * Fetches response from a fetch request
 * @param {Response} response - response object
 * @returns {Promise<string|object>} - response data
 */
const returnFetchResponse = async (response) => {
	const contentType = response.headers.get('content-type');
	if(contentType && contentType.indexOf('application/json') !== -1) {
		return await response.json();
	} else{
		const text = await response.text();
		if(text?.includes('Access is denied.')) {
			throw new Error('Steam API key is invalid');
		}

		return text;
	}
};

/**
 * Fetches steam level of user
 * @param {string} steamId - steam id of user
 * @param {string} apiKey - steam api key
 * @param {object} requestOptions - Request options for proxy and retry logic
 * @returns {Promise<number>} - steam level
 */
const fetchSteamLevel = async (steamId, apiKey, requestOptions = {}) => {
	const url = `https://api.steampowered.com/IPlayerService/GetSteamLevel/v1/?key=${apiKey}&steamid=${steamId}`;
	const response = await fetchWithRetry(url, {}, requestOptions);
	const data = await returnFetchResponse(response);

	const playerLevel = data?.response?.player_level;

	if(playerLevel) {
		assert(typeof playerLevel === 'number', `There was an error fetching your steam level. Expected number but got type: ${typeof playerLevel}, value: ${playerLevel}. Full response: ${JSON.stringify(data)}`);
	}

	return playerLevel || 0;
};

/**
 * Fetch steam profile of a user
 * @param {string} steamId - steam id 64 of the user
 * @param {string} apiKey - steam api key
 * @param {object} requestOptions - Request options for proxy and retry logic
 * @returns {object} the users steam profile
 */
const fetchSteamProfile = async (steamId, apiKey, requestOptions = {}) => {
	const url = `https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=${apiKey}&steamids=${steamId}`;
	const response = await fetchWithRetry(url, {}, requestOptions);
	const data = await returnFetchResponse(response);

	const profile = data?.response?.players?.find(profile => profile.steamid === steamId);
	assert(profile, `There was an error fetching your steam profile. No profile found for steamId: ${steamId}. Full response: ${JSON.stringify(data)}`);

	return profile;
};

module.exports = {
	fetchSteamLevel,
	fetchSteamProfile
};